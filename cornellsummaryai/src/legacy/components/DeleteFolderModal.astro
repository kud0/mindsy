---
export interface Props {
  lang?: 'en' | 'es';
}

const { lang = 'en' } = Astro.props;

const t = {
  en: {
    title: 'Delete Folder',
    message: 'Are you sure you want to delete',
    warning: 'All notes in this folder will be moved to "Unfiled". This action cannot be undone.',
    cancel: 'Cancel',
    delete: 'Delete',
    deleting: 'Deleting...'
  },
  es: {
    title: 'Eliminar Carpeta',
    message: '¿Estás seguro de que quieres eliminar',
    warning: 'Todas las notas en esta carpeta se moverán a "Sin Clasificar". Esta acción no se puede deshacer.',
    cancel: 'Cancelar',
    delete: 'Eliminar',
    deleting: 'Eliminando...'
  }
}[lang];
---

<div id="delete-folder-modal" class="modal hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <div class="warning-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 9v3m0 3h.01M4.98 4.98l14.04 14.04M19.02 4.98L4.98 19.02" />
        </svg>
      </div>
    </div>
    
    <h2 class="modal-title">{t.title}</h2>
    
    <p class="modal-message">
      {t.message} <strong id="folder-name-display"></strong>?
    </p>
    
    <p class="modal-warning">
      {t.warning}
    </p>
    
    <div class="modal-actions">
      <button type="button" class="btn-cancel">{t.cancel}</button>
      <button type="button" class="btn-delete">
        <span class="btn-text">{t.delete}</span>
        <span class="btn-loading hidden">{t.deleting}</span>
      </button>
    </div>
  </div>
</div>

<style>
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .modal.hidden {
    display: none;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    position: relative;
    background: white;
    border-radius: 0.75rem;
    padding: 2rem;
    max-width: 400px;
    width: 100%;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    animation: slideUp 0.3s ease;
  }

  @keyframes slideUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .modal-header {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .warning-icon {
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #fef2f2;
    color: #dc2626;
    border-radius: 50%;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1rem;
    color: #111827;
  }

  .modal-message {
    text-align: center;
    color: #4b5563;
    margin-bottom: 1rem;
    font-size: 0.95rem;
  }

  .modal-message strong {
    color: #111827;
    font-weight: 600;
  }

  .modal-warning {
    text-align: center;
    color: #dc2626;
    background: #fef2f2;
    padding: 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    margin-bottom: 1.5rem;
  }

  .modal-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
  }

  .btn-cancel,
  .btn-delete {
    padding: 0.625rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s;
    cursor: pointer;
    border: none;
  }

  .btn-cancel {
    background: white;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .btn-cancel:hover {
    background: #f9fafb;
  }

  .btn-delete {
    background: #dc2626;
    color: white;
  }

  .btn-delete:hover {
    background: #b91c1c;
  }

  .btn-delete:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .btn-loading {
    display: none;
  }

  .btn-delete.loading .btn-text {
    display: none;
  }

  .btn-delete.loading .btn-loading {
    display: inline;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('delete-folder-modal');
    const backdrop = modal?.querySelector('.modal-backdrop');
    const cancelBtn = modal?.querySelector('.btn-cancel');
    const deleteBtn = modal?.querySelector('.btn-delete') as HTMLButtonElement;
    const folderNameDisplay = document.getElementById('folder-name-display');
    
    let currentFolderId: string | null = null;
    let currentFolderName: string | null = null;

    // Listen for delete folder event
    window.addEventListener('showDeleteFolderModal', ((e: CustomEvent) => {
      currentFolderId = e.detail.folderId;
      currentFolderName = e.detail.folderName;
      
      if (folderNameDisplay && currentFolderName) {
        folderNameDisplay.textContent = currentFolderName;
      }
      
      modal?.classList.remove('hidden');
    }) as EventListener);

    // Hide modal
    function hideModal() {
      modal?.classList.add('hidden');
      currentFolderId = null;
      currentFolderName = null;
    }

    // Cancel button
    cancelBtn?.addEventListener('click', hideModal);
    backdrop?.addEventListener('click', hideModal);

    // Delete button
    deleteBtn?.addEventListener('click', async () => {
      if (!currentFolderId) return;

      deleteBtn.classList.add('loading');
      deleteBtn.disabled = true;

      try {
        const response = await fetch(`/api/folders?id=${encodeURIComponent(currentFolderId)}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          hideModal();
          window.location.reload();
        } else {
          const error = await response.json();
          alert(`Failed to delete folder: ${error.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error deleting folder:', error);
        alert('Failed to delete folder');
      } finally {
        deleteBtn.classList.remove('loading');
        deleteBtn.disabled = false;
      }
    });
  });
</script>