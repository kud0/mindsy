---
export interface Props {
  lang?: 'en' | 'es';
}

const { lang = 'en' } = Astro.props;

const t = {
  en: {
    title: 'Create New Folder',
    nameLabel: 'Folder Name',
    namePlaceholder: 'Enter folder name',
    colorLabel: 'Color',
    iconLabel: 'Icon',
    cancel: 'Cancel',
    create: 'Create Folder',
    creating: 'Creating...'
  },
  es: {
    title: 'Crear Nueva Carpeta',
    nameLabel: 'Nombre de Carpeta',
    namePlaceholder: 'Ingrese el nombre de la carpeta',
    colorLabel: 'Color',
    iconLabel: '√çcono',
    cancel: 'Cancelar',
    create: 'Crear Carpeta',
    creating: 'Creando...'
  }
}[lang];

const colors = [
  '#3B82F6', // blue
  '#10B981', // green
  '#F59E0B', // amber
  '#EF4444', // red
  '#8B5CF6', // purple
  '#EC4899', // pink
  '#14B8A6', // teal
  '#F97316', // orange
];

const icons = [
  'üìÅ', 'üìö', 'üéì', 'üíº', 'üî¨', 'üí°', 'üéØ', 'üìù',
  '‚ö°', 'üåü', 'üöÄ', 'üé®', 'üèÜ', 'üìä', 'üîç', 'üíª'
];
---

<div id="create-folder-modal" class="modal hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <h2 class="modal-title">{t.title}</h2>
    
    <form id="create-folder-form">
      <!-- Folder Name -->
      <div class="form-group">
        <label for="folder-name">{t.nameLabel}</label>
        <input
          type="text"
          id="folder-name"
          name="name"
          placeholder={t.namePlaceholder}
          required
          maxlength="50"
        />
      </div>

      <!-- Color Selection -->
      <div class="form-group">
        <label>{t.colorLabel}</label>
        <div class="color-grid">
          {colors.map((color, index) => (
            <label class="color-option">
              <input
                type="radio"
                name="color"
                value={color}
                checked={index === 0}
              />
              <span class="color-swatch" style={`background-color: ${color}`}></span>
            </label>
          ))}
        </div>
      </div>

      <!-- Icon Selection -->
      <div class="form-group">
        <label>{t.iconLabel}</label>
        <div class="icon-grid">
          {icons.map((icon, index) => (
            <label class="icon-option">
              <input
                type="radio"
                name="icon"
                value={icon}
                checked={index === 0}
              />
              <span class="icon-display">{icon}</span>
            </label>
          ))}
        </div>
      </div>

      <!-- Actions -->
      <div class="modal-actions">
        <button type="button" class="btn-cancel">{t.cancel}</button>
        <button type="submit" class="btn-create">
          <span class="btn-text">{t.create}</span>
          <span class="btn-loading hidden">{t.creating}</span>
        </button>
      </div>
    </form>
  </div>
</div>

<style>
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .modal.hidden {
    display: none;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    position: relative;
    background: white;
    border-radius: 0.75rem;
    padding: 2rem;
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }

  .modal-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: #111827;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  input[type="text"] {
    width: 100%;
    padding: 0.625rem 0.875rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s;
  }

  input[type="text"]:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .color-grid,
  .icon-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(3rem, 1fr));
    gap: 0.5rem;
  }

  .color-option,
  .icon-option {
    position: relative;
    cursor: pointer;
  }

  .color-option input,
  .icon-option input {
    position: absolute;
    opacity: 0;
  }

  .color-swatch {
    display: block;
    width: 3rem;
    height: 3rem;
    border-radius: 0.5rem;
    border: 2px solid transparent;
    transition: all 0.2s;
  }

  .color-option input:checked + .color-swatch {
    border-color: #1f2937;
    transform: scale(1.1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .icon-display {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    font-size: 1.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    background: white;
    transition: all 0.2s;
  }

  .icon-option input:checked + .icon-display {
    border-color: #3b82f6;
    background: #eff6ff;
    transform: scale(1.05);
  }

  .modal-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  .btn-cancel,
  .btn-create {
    padding: 0.625rem 1.25rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s;
    cursor: pointer;
    border: none;
  }

  .btn-cancel {
    background: white;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .btn-cancel:hover {
    background: #f9fafb;
  }

  .btn-create {
    background: #3b82f6;
    color: white;
  }

  .btn-create:hover {
    background: #2563eb;
  }

  .btn-create:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .btn-loading {
    display: none;
  }

  .btn-create.loading .btn-text {
    display: none;
  }

  .btn-create.loading .btn-loading {
    display: inline;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('CreateFolderModal: DOM loaded');
    const modal = document.getElementById('create-folder-modal');
    const form = document.getElementById('create-folder-form') as HTMLFormElement;
    const cancelBtn = modal?.querySelector('.btn-cancel');
    const createBtn = modal?.querySelector('.btn-create') as HTMLButtonElement;
    const backdrop = modal?.querySelector('.modal-backdrop');
    
    console.log('CreateFolderModal elements found:', {
      modal: !!modal,
      form: !!form,
      cancelBtn: !!cancelBtn,
      createBtn: !!createBtn,
      backdrop: !!backdrop
    });

    // Show modal when event is dispatched
    window.addEventListener('showCreateFolderModal', () => {
      console.log('showCreateFolderModal event received in modal');
      modal?.classList.remove('hidden');
      const nameInput = form?.querySelector('#folder-name') as HTMLInputElement;
      nameInput?.focus();
      console.log('Modal should be visible now');
    });

    // Hide modal
    function hideModal() {
      modal?.classList.add('hidden');
      form?.reset();
    }

    cancelBtn?.addEventListener('click', hideModal);
    backdrop?.addEventListener('click', hideModal);

    // Handle form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const name = formData.get('name') as string;
      const color = formData.get('color') as string;
      const icon = formData.get('icon') as string;

      if (!name) return;

      // Show loading state
      createBtn?.classList.add('loading');
      createBtn.disabled = true;

      try {
        const response = await fetch('/api/folders', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, color, icon })
        });

        if (response.ok) {
          hideModal();
          window.location.reload(); // Refresh to show new folder
        } else {
          const error = await response.json();
          alert(error.error || 'Failed to create folder');
        }
      } catch (error) {
        console.error('Error creating folder:', error);
        alert('Failed to create folder');
      } finally {
        createBtn?.classList.remove('loading');
        createBtn.disabled = false;
      }
    });
  });
</script>