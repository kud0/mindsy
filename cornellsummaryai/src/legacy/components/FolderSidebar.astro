---
export interface Props {
  folders?: any[];
  currentFolderId?: string;
  lang?: 'en' | 'es';
  totalNoteCount?: number;
  unfiledNoteCount?: number;
}

const { folders = [], currentFolderId, lang = 'en', totalNoteCount = 0, unfiledNoteCount = 0 } = Astro.props;

// Translations
const t = {
  en: {
    allNotes: 'All Notes',
    folders: 'Folders',
    newFolder: 'New Folder',
    editFolders: 'Edit Folder Names',
    saveChanges: 'Save Changes',
    cancelEdit: 'Cancel',
    unfiled: 'Unfiled',
    searchPlaceholder: 'Search notes...',
    noFolders: 'No folders yet',
    createFirst: 'Create your first folder',
    editFolder: 'Edit name',
    deleteFolder: 'Delete folder',
    folderOptions: 'Folder options',
    manageFolders: 'Manage Folders',
    editSelected: 'Edit Selected',
    deleteSelected: 'Delete Selected',
    selectFolders: 'Select folders to manage',
    confirmDelete: 'Are you sure you want to delete',
    deleteWarning: 'This will move all notes in this folder to "Unfiled".\nThis action cannot be undone.',
    folderDeleted: 'has been deleted successfully.',
    deleteFailed: 'Failed to delete folder:',
    networkError: 'Network error occurred while deleting folder. Please try again.'
  },
  es: {
    allNotes: 'Todas las Notas',
    folders: 'Carpetas',
    newFolder: 'Nueva Carpeta',
    editFolders: 'Editar Nombres de Carpetas',
    saveChanges: 'Guardar Cambios',
    cancelEdit: 'Cancelar',
    unfiled: 'Sin Clasificar',
    searchPlaceholder: 'Buscar notas...',
    noFolders: 'Sin carpetas a√∫n',
    createFirst: 'Crea tu primera carpeta',
    editFolder: 'Editar nombre',
    deleteFolder: 'Eliminar carpeta',
    folderOptions: 'Opciones de carpeta',
    manageFolders: 'Gestionar Carpetas',
    editSelected: 'Editar Seleccionadas',
    deleteSelected: 'Eliminar Seleccionadas',
    selectFolders: 'Seleccionar carpetas para gestionar',
    confirmDelete: '¬øEst√°s seguro de que quieres eliminar',
    deleteWarning: 'Esto mover√° todas las notas de esta carpeta a "Sin Clasificar".\nEsta acci√≥n no se puede deshacer.',
    folderDeleted: 'ha sido eliminada exitosamente.',
    deleteFailed: 'Error al eliminar la carpeta:',
    networkError: 'Error de red al eliminar la carpeta. Por favor, int√©ntalo de nuevo.'
  }
}[lang];

// Build folder tree structure
function buildFolderTree(folders: any[], parentId: string | null = null): any[] {
  return folders
    .filter(f => f.parent_id === parentId)
    .map(folder => ({
      ...folder,
      children: buildFolderTree(folders, folder.id)
    }));
}

// For now, let's flatten the folders for simpler rendering
const allFolders = folders || [];
---

<aside id="folder-sidebar" class="folder-sidebar">
  <!-- Search Bar -->
  <div class="sidebar-search">
    <input 
      type="text" 
      id="note-search"
      placeholder={t.searchPlaceholder}
      class="search-input"
    />
  </div>

  <!-- Folder Navigation -->
  <nav class="folder-nav">
    <!-- All Notes -->
    <button 
      class={`folder-item ${!currentFolderId ? 'active' : ''}`}
      data-folder-id="all"
    >
      <span class="folder-icon">üè†</span>
      <span class="folder-name">{t.allNotes}</span>
      <span class="note-count">{totalNoteCount}</span>
    </button>

    <!-- Unfiled Notes -->
    <button 
      class={`folder-item ${currentFolderId === 'unfiled' ? 'active' : ''}`}
      data-folder-id="unfiled"
    >
      <span class="folder-icon">üìÑ</span>
      <span class="folder-name">{t.unfiled}</span>
      <span class="note-count">{unfiledNoteCount}</span>
    </button>

    <!-- Divider -->
    <div class="sidebar-divider"></div>

    <!-- Folders Header -->
    <div class="folders-header">
      <span class="folders-title">{t.folders}</span>
      <div class="folder-actions-container">
        <button 
          id="new-folder-btn" 
          class="new-folder-btn" 
          title={t.newFolder}
          onclick="window.dispatchEvent(new CustomEvent('showCreateFolderModal'));"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
        </button>
        <button 
          id="edit-folders-btn-header" 
          class="edit-folders-btn-header" 
          title={t.editFolders}
          onmousedown="window.folderSidebarEditMode && window.folderSidebarEditMode(); event.preventDefault(); event.stopPropagation();"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
            <path d="m18.5 2.5 a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
          </svg>
        </button>
      </div>
      <!-- Edit Mode Actions (hidden by default) -->
      <div id="edit-mode-actions" class="edit-mode-actions hidden">
        <button id="save-changes-btn" class="save-btn" title={t.saveChanges}>
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="20,6 9,17 4,12"></polyline>
          </svg>
          <span>{t.saveChanges}</span>
        </button>
        <button id="cancel-edit-btn" class="cancel-btn" title={t.cancelEdit}>
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
          <span>{t.cancelEdit}</span>
        </button>
      </div>
    </div>
    

    <!-- Folder Tree -->
    <div class="folder-tree">
      {allFolders.length === 0 ? (
        <div class="no-folders">
          <p>{t.noFolders}</p>
          <button class="create-first-btn">{t.createFirst}</button>
        </div>
      ) : (
        <ul class="folder-list">
          {allFolders.map((folder) => (
            <li class="folder-list-item">
              <div class="folder-item-container">
                <button 
                  class={`folder-item ${currentFolderId === folder.id ? 'active' : ''}`}
                  data-folder-id={folder.id}
                  data-folder-name={folder.name}
                  data-folder-color={folder.color}
                  style="background-color: rgba(59, 130, 246, 0.15);"
                >
                  <span class="folder-chevron">
                    {/* No children for now - simplified */}
                  </span>
                  <span class="folder-icon" style={`color: ${folder.color || '#3B82F6'}`}>{folder.icon}</span>
                  <span class="folder-name-display">{folder.name}</span>
                  <input 
                    type="text" 
                    class="folder-name-input hidden" 
                    value={folder.name}
                    data-folder-id={folder.id}
                    data-original-name={folder.name}
                  />
                  <span class="note-count" style={`background-color: rgba(59, 130, 246, 0.3); color: ${folder.color || '#3B82F6'}`}>{folder.note_count || 0}</span>
                </button>
                <button 
                  class="folder-delete-btn"
                  data-folder-id={folder.id}
                  data-folder-name={folder.name}
                  onclick={`event.stopPropagation(); window.dispatchEvent(new CustomEvent('showDeleteFolderModal', { detail: { folderId: '${folder.id}', folderName: '${folder.name}' } }))`}
                  title="Delete folder"
                >
                  √ó
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  </nav>
  
</aside>

<style>
  .folder-sidebar {
    width: 100%;
    height: 100%;
    background: white;
    border-right: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease;
  }

  /* Mobile: Only apply fixed positioning when not inside mobile overlay */
  @media (max-width: 768px) {
    .folder-sidebar:not(#mobile-sidebar-overlay .folder-sidebar) {
      position: fixed;
      left: 0;
      top: 0;
      z-index: 40;
      transform: translateX(-100%);
    }

    .folder-sidebar:not(#mobile-sidebar-overlay .folder-sidebar).open {
      transform: translateX(0);
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    }
    
    /* When inside mobile overlay, show normally */
    #mobile-sidebar-overlay .folder-sidebar {
      position: static;
      transform: none;
      border-right: none;
    }
  }

  .sidebar-search {
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .search-input {
    width: 100%;
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: border-color 0.2s;
  }

  .search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .folder-nav {
    flex: 1;
    overflow-y: auto;
    padding: 0.5rem;
  }

  .folder-item {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    margin-bottom: 0.25rem;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s;
    position: relative;
  }

  .folder-item:hover {
    filter: brightness(1.1);
    transform: translateX(2px);
  }

  .folder-item.active {
    font-weight: 600;
    box-shadow: 0 0 0 2px currentColor inset;
  }

  .folder-chevron {
    width: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s;
  }

  .folder-chevron.expanded {
    transform: rotate(90deg);
  }

  .folder-icon {
    font-size: 1rem;
  }

  .folder-name {
    flex: 1;
    text-align: left;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .note-count {
    padding: 0.125rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-left: auto;
  }

  .folder-actions-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .sidebar-bottom-actions {
    padding: 1rem;
    border-top: 1px solid #e5e7eb;
    margin-top: auto;
  }

  .edit-folders-icon-btn {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #6b7280;
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    transition: all 0.2s;
    margin-left: auto;
  }

  .edit-folders-icon-btn:hover {
    background: #4b5563;
    transform: scale(1.05);
  }

  .edit-folders-icon-btn.active {
    background: #f59e0b;
  }

  .edit-folders-icon-btn.active:hover {
    background: #d97706;
  }

  .edit-mode-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.5rem;
    padding: 0.75rem;
    background: #f9fafb;
    border-radius: 0.5rem;
    border: 1px solid #e5e7eb;
  }

  .edit-mode-actions.hidden {
    display: none;
  }

  .edit-mode-actions-bottom {
    display: flex !important;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.75rem;
    padding: 0.75rem;
    background: #dc2626 !important;
    border-radius: 0.5rem;
    border: 3px solid #ffffff !important;
    position: relative !important;
    z-index: 9999 !important;
    height: 80px !important;
    width: 100% !important;
  }

  .edit-mode-actions-bottom.hidden {
    display: none !important;
  }

  .save-btn, .cancel-btn, .save-btn-bottom, .cancel-btn-bottom {
    display: flex !important;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    pointer-events: auto;
    z-index: 10;
    position: relative;
    min-width: 120px !important;
    min-height: 40px !important;
    flex-shrink: 0 !important;
  }

  .save-btn, .save-btn-bottom {
    background: #10b981;
    color: white;
  }

  .save-btn:hover, .save-btn-bottom:hover {
    background: #059669;
  }

  .cancel-btn, .cancel-btn-bottom {
    background: #6b7280;
    color: white;
  }

  .cancel-btn:hover, .cancel-btn-bottom:hover {
    background: #4b5563;
  }

  .folder-name-input {
    flex: 1;
    padding: 0.25rem 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    background: white;
    margin-right: 0.5rem;
  }

  .folder-name-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
  }

  /* Hide delete buttons in edit mode */
  .sidebar-edit-mode .folder-delete-btn {
    display: none;
  }

  /* Disable folder navigation in edit mode */
  .sidebar-edit-mode .folder-item {
    pointer-events: none;
    cursor: default;
  }

  .sidebar-edit-mode .folder-name-input {
    pointer-events: auto;
  }

  .folder-item-container {
    display: flex;
    align-items: center;
    position: relative;
    width: 100%;
  }

  .folder-item-container .folder-item {
    flex: 1;
  }

  .folder-delete-btn {
    position: absolute;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    color: #9ca3af;
    font-size: 1.25rem;
    cursor: pointer;
    opacity: 0;
    transition: all 0.2s;
    border-radius: 0.25rem;
    backdrop-filter: blur(4px);
  }

  .folder-item-container:hover .folder-delete-btn {
    opacity: 1;
  }

  .folder-delete-btn:hover {
    color: #dc2626;
    background: rgba(254, 226, 226, 0.9);
    transform: scale(1.1);
  }

  .sidebar-divider {
    height: 1px;
    background: #e5e7eb;
    margin: 0.5rem 0;
  }

  .folders-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    color: #9ca3af;
    position: relative;
    z-index: 5;
  }

  .new-folder-btn {
    padding: 0.5rem;
    background: #3b82f6;
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
  }

  .new-folder-btn:hover {
    background: #2563eb;
    transform: scale(1.05);
  }

  .edit-folders-btn-header {
    padding: 0.5rem;
    background: #9ca3af;
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
  }

  .edit-folders-btn-header:hover {
    background: #6b7280;
    transform: scale(1.05);
  }

  .edit-folders-btn-header.active {
    background: #f59e0b;
  }

  .edit-folders-btn-header.active:hover {
    background: #d97706;
  }

  .folder-tree {
    padding: 0.25rem 0;
  }

  .folder-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .folder-list-item {
    margin-left: calc(var(--level, 0) * 1.5rem);
  }

  .folder-children {
    display: none;
  }

  .folder-children.expanded {
    display: block;
  }

  .no-folders {
    padding: 2rem 1rem;
    text-align: center;
    color: #9ca3af;
  }

  .no-folders p {
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }

  .create-first-btn {
    padding: 0.5rem 1rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s;
  }

  .create-first-btn:hover {
    background: #2563eb;
  }

  /* Drag and drop styles */
  .folder-item.drag-over {
    background: #dbeafe;
    box-shadow: inset 0 0 0 2px #3b82f6;
  }

  .note-card.dragging {
    opacity: 0.5;
    cursor: grabbing;
  }

  /* Edit Modal Styles */
  .edit-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .edit-modal.hidden {
    display: none;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    position: relative;
    background: white;
    border-radius: 1rem;
    padding: 0;
    max-width: 500px;
    width: 100%;
    max-height: 80vh;
    overflow: hidden;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    animation: slideUp 0.3s ease;
  }

  @keyframes slideUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #e5e7eb;
    background: #f8fafc;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  .modal-close {
    padding: 0.5rem;
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    border-radius: 0.375rem;
    transition: all 0.2s;
  }

  .modal-close:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .modal-body {
    padding: 2rem;
    overflow-y: auto;
    max-height: 50vh;
  }

  .modal-description {
    color: #6b7280;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
  }

  .folder-edit-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .folder-edit-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 0.5rem;
    border: 1px solid #e5e7eb;
  }

  .folder-edit-icon {
    font-size: 1.25rem;
    min-width: 24px;
  }

  .folder-edit-input {
    flex: 1;
    padding: 0.5rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    background: white;
    transition: border-color 0.2s;
  }

  .folder-edit-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .modal-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
    padding: 1.5rem 2rem;
    border-top: 1px solid #e5e7eb;
    background: #f8fafc;
  }

  .btn-cancel,
  .btn-save {
    padding: 0.625rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s;
    cursor: pointer;
    border: none;
  }

  .btn-cancel {
    background: white;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .btn-cancel:hover {
    background: #f9fafb;
  }

  .btn-save {
    background: #3b82f6;
    color: white;
  }

  .btn-save:hover {
    background: #2563eb;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('FolderSidebar: DOM loaded');
    
    const sidebar = document.getElementById('folder-sidebar');
    const folderItems = document.querySelectorAll('.folder-item');
    const searchInput = document.getElementById('note-search');
    const newFolderBtn = document.getElementById('new-folder-btn');
    const editFoldersBtnHeader = document.getElementById('edit-folders-btn-header');
    const editModeActions = document.getElementById('edit-mode-actions');
    const saveChangesBtn = document.getElementById('save-changes-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');
    const createFirstBtn = document.querySelector('.create-first-btn');
    
    let isEditMode = false;
    
    // Set up global functions for inline handlers
    window.folderSidebarEditMode = function() {
      console.log('folderSidebarEditMode called');
      toggleEditMode();
    };
    
    window.folderSidebarSave = function() {
      console.log('Save function called');
      saveAllChanges();
    };
    
    window.folderSidebarCancel = function() {
      console.log('Cancel function called');
      cancelEditMode();
    };

      // Toggle folder expansion
    folderItems.forEach(item => {
      const chevron = item.querySelector('.folder-chevron');
      if (chevron && chevron.getAttribute('data-has-children') === 'true') {
        chevron.addEventListener('click', (e) => {
          e.stopPropagation();
          chevron.classList.toggle('expanded');
          const children = item.parentElement?.querySelector('.folder-children');
          children?.classList.toggle('expanded');
        });
      }
    });

    // Folder navigation
    folderItems.forEach(item => {
      item.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const folderId = item.getAttribute('data-folder-id');
        
        // Navigate to folder
        navigateToFolder(folderId);
      });
    });
    

    // Search functionality
    let searchTimeout: NodeJS.Timeout;
    searchInput?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const query = (e.target as HTMLInputElement).value;
        searchNotes(query);
      }, 300);
    });

    // New folder creation
    newFolderBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      showCreateFolderModal();
    });

    createFirstBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      showCreateFolderModal();
    });

    // Edit mode functionality  
    console.log('Setting up event listeners:', {
      saveChangesBtn: !!saveChangesBtn,
      cancelEditBtn: !!cancelEditBtn,
      saveChangesBtnBottom: !!saveChangesBtnBottom,
      cancelEditBtnBottom: !!cancelEditBtnBottom
    });
    
    saveChangesBtn?.addEventListener('click', () => {
      console.log('Header save clicked');
      saveAllChanges();
    });
    cancelEditBtn?.addEventListener('click', () => {
      console.log('Header cancel clicked'); 
      cancelEditMode();
    });
    
    function toggleEditMode() {
      console.log('toggleEditMode called, current isEditMode:', isEditMode);
      isEditMode = !isEditMode;
      
      if (isEditMode) {
        console.log('Calling enterEditMode');
        enterEditMode();
      } else {
        console.log('Calling exitEditMode');
        exitEditMode();
      }
    }
    
    function enterEditMode() {
      console.log('enterEditMode called');
      sidebar?.classList.add('sidebar-edit-mode');
      editFoldersBtnHeader?.classList.add('active');
      
      // Remove any existing dynamic buttons
      const existingButtons = document.getElementById('dynamic-edit-buttons');
      if (existingButtons) {
        existingButtons.remove();
      }
      
      // Show input fields and hide display names
      document.querySelectorAll('.folder-name-display').forEach(display => {
        display.classList.add('hidden');
      });
      
      document.querySelectorAll('.folder-name-input').forEach(input => {
        input.classList.remove('hidden');
      });
      
      // Create buttons positioned to appear in sidebar area
      const buttonContainer = document.createElement('div');
      buttonContainer.id = 'dynamic-edit-buttons';
      buttonContainer.style.cssText = `
        position: fixed !important;
        bottom: 20px !important;
        left: 100px !important;
        display: flex !important; 
        gap: 6px !important; 
        padding: 8px !important; 
        background: white !important; 
        border: 1px solid #e5e7eb !important; 
        border-radius: 6px !important; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
        z-index: 9999 !important;
      `;
      
      // Create Save button
      const saveBtn = document.createElement('button');
      saveBtn.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
        <span>Save Changes</span>
      `;
      saveBtn.style.cssText = `
        display: flex !important; 
        align-items: center !important; 
        gap: 6px !important; 
        padding: 8px 12px !important; 
        background: #10b981 !important; 
        color: white !important; 
        border: none !important; 
        border-radius: 6px !important; 
        font-size: 12px !important; 
        font-weight: 500 !important; 
        cursor: pointer !important; 
        transition: all 0.2s !important;
      `;
      saveBtn.onmouseover = () => saveBtn.style.background = '#059669';
      saveBtn.onmouseout = () => saveBtn.style.background = '#10b981';
      saveBtn.onclick = () => saveAllChanges();
      
      // Create Cancel button
      const cancelBtn = document.createElement('button');
      cancelBtn.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
        <span>Cancel</span>
      `;
      cancelBtn.style.cssText = `
        display: flex !important; 
        align-items: center !important; 
        gap: 6px !important; 
        padding: 8px 12px !important; 
        background: #6b7280 !important; 
        color: white !important; 
        border: none !important; 
        border-radius: 6px !important; 
        font-size: 12px !important; 
        font-weight: 500 !important; 
        cursor: pointer !important; 
        transition: all 0.2s !important;
      `;
      cancelBtn.onmouseover = () => cancelBtn.style.background = '#4b5563';
      cancelBtn.onmouseout = () => cancelBtn.style.background = '#6b7280';
      cancelBtn.onclick = () => cancelEditMode();
      
      buttonContainer.appendChild(saveBtn);
      buttonContainer.appendChild(cancelBtn);
      document.body.appendChild(buttonContainer);
      
      isEditMode = true;
    }    
    function exitEditMode() {
      sidebar?.classList.remove('sidebar-edit-mode');
      editFoldersBtnHeader?.classList.remove('active');
      editModeActions?.classList.add('hidden');
      
      // Remove dynamic buttons
      const dynamicButtons = document.getElementById('dynamic-edit-buttons');
      if (dynamicButtons) {
        dynamicButtons.remove();
      }
      
      // Hide input fields and show display names
      document.querySelectorAll('.folder-name-display').forEach(display => {
        display.classList.remove('hidden');
      });
      
      document.querySelectorAll('.folder-name-input').forEach(input => {
        input.classList.add('hidden');
      });
      
      isEditMode = false;
    }
    
    function cancelEditMode() {
      // Reset all inputs to original values
      document.querySelectorAll('.folder-name-input').forEach(input => {
        const originalName = input.getAttribute('data-original-name');
        if (originalName) {
          input.value = originalName;
        }
      });
      
      exitEditMode();
    }    
    async function saveAllChanges() {
      const inputs = document.querySelectorAll('.folder-name-input');
      const changes = [];
      
      // Collect all changes
      inputs.forEach(input => {
        const folderId = input.getAttribute('data-folder-id');
        const originalName = input.getAttribute('data-original-name');
        const newName = input.value.trim();
        
        if (newName && newName !== originalName) {
          changes.push({ id: folderId, name: newName });
        }
      });
      
      if (changes.length === 0) {
        exitEditMode();
        return;
      }
      
      // Save changes to server
      try {
        for (const change of changes) {
          const response = await fetch('/api/folders', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: change.id,
              name: change.name
            })
          });
          
          if (!response.ok) {
            const error = await response.json();
            alert(`Failed to update folder: ${error.error || 'Unknown error'}`);
            return;
          }
        }
        
        // Success - refresh the page to show updated names
        window.location.reload();
      } catch (error) {
        console.error('Error saving folder changes:', error);
        alert('Failed to save changes. Please try again.');
      }
    }

    // Helper functions
    function navigateToFolder(folderId: string | null) {
      // Update active state
      folderItems.forEach(item => item.classList.remove('active'));
      document.querySelector(`[data-folder-id="${folderId}"]`)?.classList.add('active');

      // Filter notes
      window.dispatchEvent(new CustomEvent('filterByFolder', { detail: { folderId } }));
    }

    function searchNotes(query: string) {
      window.dispatchEvent(new CustomEvent('searchNotes', { detail: { query } }));
    }


    function showCreateFolderModal() {
      console.log('showCreateFolderModal function called');
      window.dispatchEvent(new CustomEvent('showCreateFolderModal'));
      console.log('showCreateFolderModal event dispatched');
    }
    
    function showEditFolderModal(folderId: string | null) {
      console.log('showEditFolderModal called for folder:', folderId);
      window.dispatchEvent(new CustomEvent('showEditFolderModal', { detail: { folderId } }));
    }
    
    function showDeleteFolderModal(folderId: string | null, folderName: string) {
      console.log('showDeleteFolderModal called for folder:', folderId, folderName);
      
      // Get translations from the component
      const lang = document.documentElement.lang || 'en';
      const translations = {
        en: {
          confirmDelete: 'Are you sure you want to delete',
          deleteWarning: 'This will move all notes in this folder to "Unfiled".\nThis action cannot be undone.'
        },
        es: {
          confirmDelete: '¬øEst√°s seguro de que quieres eliminar',
          deleteWarning: 'Esto mover√° todas las notas de esta carpeta a "Sin Clasificar".\nEsta acci√≥n no se puede deshacer.'
        }
      };
      
      const t = translations[lang as keyof typeof translations] || translations.en;
      
      // Simple confirmation dialog for now
      const confirmed = confirm(
        `${t.confirmDelete} "${folderName}"?\n\n${t.deleteWarning}`
      );
      
      if (confirmed && folderId) {
        deleteFolder(folderId, folderName);
      }
    }
    
    async function deleteFolder(folderId: string, folderName: string) {
      console.log('Deleting folder:', folderId);
      
      // Get translations
      const lang = document.documentElement.lang || 'en';
      const translations = {
        en: {
          folderDeleted: 'has been deleted successfully.',
          deleteFailed: 'Failed to delete folder:',
          networkError: 'Network error occurred while deleting folder. Please try again.'
        },
        es: {
          folderDeleted: 'ha sido eliminada exitosamente.',
          deleteFailed: 'Error al eliminar la carpeta:',
          networkError: 'Error de red al eliminar la carpeta. Por favor, int√©ntalo de nuevo.'
        }
      };
      
      const t = translations[lang as keyof typeof translations] || translations.en;
      
      try {
        const response = await fetch(`/api/folders?id=${encodeURIComponent(folderId)}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          console.log('Folder deleted successfully');
          
          // Show success message
          alert(`"${folderName}" ${t.folderDeleted}`);
          
          // Refresh the page to update the sidebar
          window.location.reload();
        } else {
          const error = await response.json();
          console.error('Failed to delete folder:', error);
          alert(`${t.deleteFailed} ${error.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error deleting folder:', error);
        alert(t.networkError);
      }
    }

    // Listen for drag and drop events
    folderItems.forEach(item => {
      item.addEventListener('dragover', (e) => {
        e.preventDefault();
        item.classList.add('drag-over');
      });

      item.addEventListener('dragleave', () => {
        item.classList.remove('drag-over');
      });

      item.addEventListener('drop', (e) => {
        e.preventDefault();
        item.classList.remove('drag-over');
        
        const jobId = e.dataTransfer?.getData('jobId');
        const folderId = item.getAttribute('data-folder-id');
        
        if (jobId && folderId) {
          moveNoteToFolder(jobId, folderId === 'unfiled' ? null : folderId);
        }
      });
    });

    async function moveNoteToFolder(jobId: string, folderId: string | null) {
      try {
        const response = await fetch('/api/notes/move', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ jobIds: [jobId], folderId })
        });

        if (response.ok) {
          window.location.reload(); // Refresh to show updated organization
        }
      } catch (error) {
        console.error('Failed to move note:', error);
      }
    }
  });
</script>

