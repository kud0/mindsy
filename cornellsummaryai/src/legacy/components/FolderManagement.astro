---
export interface Props {
  folders?: any[];
  lang?: 'en' | 'es';
}

const { folders = [], lang = 'en' } = Astro.props;

const t = {
  en: {
    manageFolders: 'Manage Folders',
    editName: 'Edit name',
    deleteFolder: 'Delete folder',
    noFolders: 'No folders to manage'
  },
  es: {
    manageFolders: 'Gestionar Carpetas',
    editName: 'Editar nombre',
    deleteFolder: 'Eliminar carpeta',
    noFolders: 'No hay carpetas para gestionar'
  }
}[lang];
---

<div class="folder-management">
  <button id="manage-btn" class="manage-btn" title={t.manageFolders}>
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="1"></circle>
      <circle cx="12" cy="5" r="1"></circle>
      <circle cx="12" cy="19" r="1"></circle>
    </svg>
  </button>
  
  <div id="manage-menu" class="manage-menu hidden">
    {folders.length === 0 ? (
      <div class="no-folders">{t.noFolders}</div>
    ) : (
      folders.map(folder => (
        <div class="folder-item" data-folder-id={folder.id}>
          <span class="folder-icon" style={`color: ${folder.color}`}>{folder.icon}</span>
          <span class="folder-name">{folder.name}</span>
          <div class="folder-actions">
            <button class="edit-btn" title={t.editName}>‚úèÔ∏è</button>
            <button class="delete-btn" title={t.deleteFolder}>üóëÔ∏è</button>
          </div>
        </div>
      ))
    )}
  </div>
</div>

<style>
  .folder-management {
    position: relative;
  }

  .manage-btn {
    padding: 0.5rem;
    background: #6b7280;
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .manage-btn:hover {
    background: #4b5563;
  }

  .manage-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    min-width: 250px;
    max-height: 300px;
    overflow-y: auto;
    z-index: 1000;
  }

  .no-folders {
    padding: 1rem;
    text-align: center;
    color: #6b7280;
  }

  .folder-item {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #f3f4f6;
    cursor: pointer;
  }

  .folder-item:hover {
    background: #f9fafb;
  }

  .folder-icon {
    margin-right: 0.5rem;
  }

  .folder-name {
    flex: 1;
  }

  .folder-actions {
    display: flex;
    gap: 0.5rem;
  }

  .edit-btn, .delete-btn {
    padding: 0.25rem;
    background: transparent;
    border: none;
    cursor: pointer;
    opacity: 0.7;
  }

  .edit-btn:hover, .delete-btn:hover {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const manageBtn = document.getElementById('manage-btn');
    const manageMenu = document.getElementById('manage-menu');
    
    // Toggle menu
    manageBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      if (manageMenu) {
        manageMenu.classList.toggle('hidden');
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', () => {
      if (manageMenu) {
        manageMenu.classList.add('hidden');
      }
    });
    
    // Handle edit buttons
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const folderId = (e.target as HTMLElement).closest('.folder-item')?.getAttribute('data-folder-id');
        if (folderId) {
          window.dispatchEvent(new CustomEvent('showEditFolderModal', { detail: { folderId } }));
        }
      });
    });
    
    // Handle delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        e.stopPropagation();
        const folderItem = (e.target as HTMLElement).closest('.folder-item');
        const folderId = folderItem?.getAttribute('data-folder-id');
        const folderName = folderItem?.querySelector('.folder-name')?.textContent;
        
        if (folderId && confirm(`Delete folder "${folderName}"?`)) {
          try {
            const response = await fetch(`/api/folders?id=${folderId}`, {
              method: 'DELETE'
            });
            if (response.ok) {
              window.location.reload();
            }
          } catch (error) {
            console.error('Error deleting folder:', error);
          }
        }
      });
    });
  });
</script>