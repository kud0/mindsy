---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Navbar from "../../components/Navbar.astro";
import Footer from "../../components/Footer.astro";
import { useTranslations } from "../../lib/i18n";

// Get user from locals (set by middleware)
const user = Astro.locals.user;
const lang = "es";
const t = useTranslations(lang);

// Custom description for roadmap page (Spanish)
const socialDescription = "¡Descubre lo que viene para MySummary APP! Nuevas funciones emocionantes, capacidades de IA mejoradas y mejor experiencia de usuario en nuestra hoja de ruta.";

// Roadmap data with status
const roadmapItems = [
  {
    id: 'august',
    title: t('roadmap.august.title'),
    date: t('roadmap.august.date'),
    desc: t('roadmap.august.desc'),
    features: t('roadmap.august.features'),
    status: 'launched',
    color: 'green',
    icon: 'launch'
  },
  {
    id: 'september',
    title: t('roadmap.september.title'),
    date: t('roadmap.september.date'),
    desc: t('roadmap.september.desc'),
    features: t('roadmap.september.features'),
    status: 'development',
    color: 'blue',
    icon: 'premium'
  },
  {
    id: 'october',
    title: t('roadmap.october.title'),
    date: t('roadmap.october.date'),
    desc: t('roadmap.october.desc'),
    features: t('roadmap.october.features'),
    status: 'planning',
    color: 'purple',
    icon: 'ai'
  },
  {
    id: 'dashboard',
    title: t('roadmap.dashboard.title'),
    date: t('roadmap.dashboard.date'),
    desc: t('roadmap.dashboard.desc'),
    features: t('roadmap.dashboard.features'),
    status: 'planning',
    color: 'orange',
    icon: 'dashboard'
  }
];

// Status configuration
const statusConfig = {
  launched: { label: t('roadmap.status.launched'), color: 'bg-green-100 text-green-800', dotColor: 'bg-green-500' },
  development: { label: t('roadmap.status.development'), color: 'bg-blue-100 text-blue-800', dotColor: 'bg-blue-500' },
  testing: { label: t('roadmap.status.testing'), color: 'bg-yellow-100 text-yellow-800', dotColor: 'bg-yellow-500' },
  planning: { label: t('roadmap.status.planning'), color: 'bg-gray-100 text-gray-800', dotColor: 'bg-gray-500' }
};
---

<BaseLayout title="Hoja de Ruta" description={socialDescription} lang="es">
  <!-- Hero Section -->
  <div class="bg-gradient-to-br from-blue-50 via-white to-purple-50">
    <Navbar lang={lang} currentPage="roadmap" isAuthenticated={!!user} />
    
    <!-- Hero Content -->
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24">
      <div class="text-center">
        <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-gray-900 mb-6">
          {t('roadmap.title')}
        </h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
          {t('roadmap.subtitle')}
        </p>
      </div>
    </div>
  </div>

  <!-- Timeline Section -->
  <section class="py-16 bg-white">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Timeline Container -->
      <div class="relative">
        <!-- Vertical Line (centered) -->
        <div class="absolute left-1/2 transform -translate-x-px top-0 bottom-0 w-0.5 bg-gradient-to-b from-blue-200 via-purple-200 to-orange-200"></div>
        
        <!-- Timeline Items -->
        <div class="space-y-24">
          {roadmapItems.map((item, index) => {
            const isEven = index % 2 === 0;
            const iconMap = {
              'launch': 'M13 10V3L4 14h7v7l9-11h-7z',
              'premium': 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z',
              'ai': 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
              'dashboard': 'M3 4a1 1 0 000 2v9a2 2 0 002 2h1a1 1 0 100-2H5V6a1 1 0 01-1-1V4a1 1 0 000-2zm8 0a1 1 0 000 2v9a2 2 0 002 2h1a1 1 0 100-2h-1V6a1 1 0 01-1-1V4a1 1 0 000-2z'
            };
            
            return (
              <div 
                class={`relative roadmap-item opacity-0 transform translate-y-8 ${isEven ? 'timeline-left' : 'timeline-right'}`}
                data-index={index}
              >
                <!-- Timeline Dot -->
                <div class="absolute left-1/2 transform -translate-x-1/2 w-6 h-6 rounded-full border-4 border-white shadow-lg z-10" 
                     class:list={[statusConfig[item.status].dotColor]}></div>
                
                <!-- Date on opposite side -->
                <div class={`absolute left-1/2 top-0 transform ${isEven ? 'translate-x-6' : '-translate-x-full -translate-x-6'} hidden md:block`}>
                  <div class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap">
                    {item.date}
                  </div>
                </div>
                
                <!-- Content Card -->
                <div class={`${isEven ? 'pr-8 md:pr-16' : 'pl-8 md:pl-16'} w-full md:w-1/2 ${isEven ? '' : 'ml-auto'}`}>
                  <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden">
                    <!-- Card Header -->
                    <div class="p-6 border-b border-gray-100">
                      <div class="flex items-start justify-between">
                        <div class="flex items-center space-x-3">
                          <div class="w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                              <path d={iconMap[item.icon] || iconMap['launch']} />
                            </svg>
                          </div>
                          <div>
                            <h3 class="text-xl font-bold text-gray-900">{item.title}</h3>
                            <!-- Show date on mobile only -->
                            <p class="text-sm text-gray-500 mt-1 md:hidden">{item.date}</p>
                          </div>
                        </div>
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium"
                              class:list={[statusConfig[item.status].color]}>{statusConfig[item.status].label}</span>
                      </div>
                    </div>
                    
                    <!-- Card Body -->
                    <div class="p-6">
                      <p class="text-gray-700 leading-relaxed mb-6">{item.desc}</p>
                      
                      <!-- Features List -->
                      <div class="space-y-3">
                        {item.features.map((feature) => (
                          <div class="flex items-center space-x-3">
                            <div class="w-2 h-2 rounded-full bg-green-500 flex-shrink-0"></div>
                            <span class="text-sm text-gray-700">{feature}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-16 bg-gradient-to-r from-blue-600 to-purple-600">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h2 class="text-3xl font-bold text-white mb-4">¿Quieres Ayudar a Dar Forma a Nuestro Futuro?</h2>
      <p class="text-xl text-blue-100 mb-8">Únete a nuestra comunidad y comparte tus comentarios para ayudarnos a crear mejores funciones</p>
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <a href="/es/dashboard" 
           class="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-xl text-blue-600 bg-white hover:bg-blue-50 transition-colors">
          Probar MySummary APP
        </a>
        <a href="mailto:support@mysummaryapp.com" 
           class="inline-flex items-center px-8 py-3 border-2 border-white text-base font-medium rounded-xl text-white hover:bg-white hover:text-blue-600 transition-colors">
          Compartir Comentarios
        </a>
      </div>
    </div>
  </section>

  <Footer lang={lang} />
</BaseLayout>

<style>
  .roadmap-item {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .roadmap-item.animate-in {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Animation effects for alternating sides */
  .timeline-left {
    transform: translateY(2rem) translateX(-2rem);
  }
  
  .timeline-right {
    transform: translateY(2rem) translateX(2rem);
  }
  
  .timeline-left.animate-in {
    transform: translateY(0) translateX(0);
  }
  
  .timeline-right.animate-in {
    transform: translateY(0) translateX(0);
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .timeline-left,
    .timeline-right {
      transform: translateY(2rem);
    }
    
    .timeline-left.animate-in,
    .timeline-right.animate-in {
      transform: translateY(0);
    }
  }
</style>

<script>
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const item = entry.target;
        const index = parseInt(item.dataset.index);
        
        // Add staggered delay based on index
        setTimeout(() => {
          item.classList.add('animate-in');
        }, index * 200);
        
        // Stop observing once animated
        observer.unobserve(item);
      }
    });
  }, observerOptions);

  // Start observing roadmap items
  document.addEventListener('DOMContentLoaded', () => {
    const roadmapItems = document.querySelectorAll('.roadmap-item');
    roadmapItems.forEach(item => observer.observe(item));
  });
</script>
</BaseLayout>