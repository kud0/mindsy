---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { useTranslations } from '../../../lib/i18n';
import GitHubButton from '../../../components/GitHubButton.astro';
import GoogleOAuthButton from '../../../components/GoogleOAuthButton.astro';

const lang = 'es';
const t = useTranslations(lang);
---

<BaseLayout title="Iniciar Sesión">
  <div class="min-h-screen flex items-start sm:items-center justify-center cosmic-login-bg pt-8 pb-12 sm:py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
    <!-- Cosmic Login Background -->
    <div class="cosmic-login-canvas absolute inset-0">
      <!-- Animated Gradient Base -->
      <div class="login-cosmic-bg"></div>
      
      <!-- Floating Login Particles -->
      <div class="login-particles-container">
        <div class="login-particle login-particle-1"></div>
        <div class="login-particle login-particle-2"></div>
        <div class="login-particle login-particle-3"></div>
        <div class="login-particle login-particle-4"></div>
        <div class="login-particle login-particle-5"></div>
        <div class="login-particle login-particle-6"></div>
        <div class="login-particle login-particle-7"></div>
        <div class="login-particle login-particle-8"></div>
      </div>
      
      <!-- Login Energy Rings -->
      <div class="login-energy-ring login-ring-1"></div>
      <div class="login-energy-ring login-ring-2"></div>
      
      <!-- Login Floating Shapes -->
      <div class="login-cosmic-shapes">
        <div class="login-shape login-shape-hexagon"></div>
        <div class="login-shape login-shape-triangle"></div>
        <div class="login-shape login-shape-diamond"></div>
      </div>
    </div>
    
    <div class="max-w-md w-full space-y-8 relative z-10">
      <!-- Login Card with Glass Morphism -->
      <div class="login-card backdrop-blur-lg bg-white/10 border border-white/20 rounded-2xl p-8 shadow-2xl">
        <div>
          <h2 class="mt-6 text-center text-3xl font-extrabold text-white login-title">
            {t('auth.login.title')}
          </h2>
          <p class="mt-2 text-center text-sm text-white/80">
            {t('auth.login.subtitle')}{' '}
            <a href="/es/auth/signup" class="font-medium text-blue-300 hover:text-blue-200 transition-colors duration-200">
              {t('auth.login.createAccount')}
            </a>
          </p>
        </div>
      
      
        <form id="login-form" class="mt-8 space-y-6" method="POST" action="/api/auth/signin">
          <div class="space-y-4">
            <div>
              <label for="email" class="block text-sm font-medium text-white/90 mb-2">{t('auth.login.email')}</label>
              <input
                id="email"
                name="email"
                type="email"
                autocomplete="email"
                required
                class="cosmic-input appearance-none relative block w-full px-4 py-3 border border-white/20 placeholder-white/50 text-white bg-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
                placeholder={t('auth.login.email')}
              />
              <div id="email-error" class="text-red-400 text-xs mt-2 hidden"></div>
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-white/90 mb-2">{t('auth.login.password')}</label>
              <input
                id="password"
                name="password"
                type="password"
                autocomplete="current-password"
                required
                class="cosmic-input appearance-none relative block w-full px-4 py-3 border border-white/20 placeholder-white/50 text-white bg-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
                placeholder={t('auth.login.password')}
              />
              <div id="password-error" class="text-red-400 text-xs mt-2 hidden"></div>
            </div>
          </div>

          <div class="flex items-center justify-between">
            <div class="text-sm">
              <a href="/es/auth/reset-password" class="font-medium text-blue-300 hover:text-blue-200 transition-colors duration-200">
                {t('auth.login.forgot')}
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="submit-btn"
              class="cosmic-login-button group relative w-full flex justify-center py-3 px-6 border border-transparent text-sm font-medium rounded-lg text-white transition-all duration-300"
            >
              <span id="submit-text">{t('auth.login.submit')}</span>
              <svg id="submit-spinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </div>
      </form>

        <!-- Divider -->
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-white/20" />
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-4 bg-white/10 text-white/80 rounded-full backdrop-blur-sm">{t('auth.github.or')}</span>
            </div>
          </div>
        </div>

        <!-- OAuth Sign-in Buttons -->
        <div class="mt-6 space-y-3">
          <GoogleOAuthButton mode="signin" lang="es" redirectTo="/es/dashboard" />
          <GitHubButton lang="es" text="Iniciar sesión con GitHub" />
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script type="module">
  import { signIn } from '/lib/auth.js';

  // Form elements
  const form = document.getElementById('login-form');
  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const emailError = document.getElementById('email-error');
  const passwordError = document.getElementById('password-error');
  const submitBtn = document.getElementById('submit-btn');
  const submitText = document.getElementById('submit-text');
  const submitSpinner = document.getElementById('submit-spinner');
  
  // Toast will be initialized from global
  
  // Form validation
  function validateForm() {
    let isValid = true;
    
    // Validate email
    if (!emailInput.value) {
      showInputError(emailInput, emailError, 'El email es obligatorio');
      isValid = false;
    } else if (!isValidEmail(emailInput.value)) {
      showInputError(emailInput, emailError, 'Por favor, introduce un email válido');
      isValid = false;
    } else {
      hideInputError(emailInput, emailError);
    }
    
    // Validate password
    if (!passwordInput.value) {
      showInputError(passwordInput, passwordError, 'La contraseña es obligatoria');
      isValid = false;
    } else if (passwordInput.value.length < 6) {
      showInputError(passwordInput, passwordError, 'La contraseña debe tener al menos 6 caracteres');
      isValid = false;
    } else {
      hideInputError(passwordInput, passwordError);
    }
    
    return isValid;
  }
  
  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }
  
  function showInputError(input, errorElement, message) {
    input.classList.add('border-red-500');
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
  }
  
  function hideInputError(input, errorElement) {
    input.classList.remove('border-red-500');
    errorElement.classList.add('hidden');
  }
  
  // Set loading state
  function setLoading(isLoading) {
    submitBtn.disabled = isLoading;
    
    if (isLoading) {
      submitText.textContent = 'Iniciando sesión...';
      submitSpinner.classList.remove('hidden');
      submitBtn.classList.add('opacity-75');
    } else {
      submitText.textContent = 'Iniciar sesión';
      submitSpinner.classList.add('hidden');
      submitBtn.classList.remove('opacity-75');
    }
  }
  
  // Handle form submission
  async function handleSubmit(e) {
    e.preventDefault();
    
    // Validate form
    if (!validateForm()) {
      return;
    }
    
    // Show loading state
    setLoading(true);
    
    try {
      // Wait for Toast to be available
      while (!window.Toast) {
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      window.Toast.loading('Autenticando...');
      
      // Create FormData and submit to API endpoint
      const formData = new FormData(form);
      
      const response = await fetch('/api/auth/signin', {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Error de inicio de sesión');
      }
      
      // Check if it's a redirect response
      if (response.redirected || response.url.includes('/dashboard')) {
        window.Toast.success('¡Éxito! Redirigiendo...');
        // The API will handle the redirect
        window.location.href = response.url || '/es/dashboard';
        return;
      }
      
      // For successful login, redirect to Spanish dashboard
      window.Toast.success('¡Éxito! Redirigiendo...');
      window.location.href = '/es/dashboard';
      
    } catch (err) {
      
      // Show error message
      const errorMessage = err instanceof Error ? err.message : 'Error de inicio de sesión. Por favor, inténtalo de nuevo.';
      if (window.Toast) {
        window.Toast.error(errorMessage);
      }
      
      setLoading(false);
    }
  }
  
  // Add form event listeners
  if (form) {
    form.addEventListener('submit', handleSubmit);
  }
  
  // Add input event listeners for real-time validation
  if (emailInput) {
    emailInput.addEventListener('input', () => {
    if (emailInput.value) {
      if (!isValidEmail(emailInput.value)) {
        showInputError(emailInput, emailError, 'Por favor, introduce un email válido');
      } else {
        hideInputError(emailInput, emailError);
      }
    } else {
      hideInputError(emailInput, emailError);
    }
    });
  }
  
  if (passwordInput) {
    passwordInput.addEventListener('input', () => {
    if (passwordInput.value && passwordInput.value.length < 6) {
      showInputError(passwordInput, passwordError, 'La contraseña debe tener al menos 6 caracteres');
    } else {
      hideInputError(passwordInput, passwordError);
    }
    });
  }
  
  // Check for error parameter in URL
  document.addEventListener('DOMContentLoaded', async () => {
    // Wait for global Toast and AuthStore to be initialized
    while (!window.Toast || !window.AuthStore) {
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    const Toast = window.Toast;
    
    const urlParams = new URLSearchParams(window.location.search);
    const errorParam = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');
    
    if (errorParam) {
      let errorMessage = decodeURIComponent(errorParam);
      
      // Handle specific OAuth error types with Spanish translations
      if (errorParam === 'access_denied') {
        errorMessage = 'La autenticación fue cancelada. Por favor, inténtalo de nuevo.';
      } else if (errorParam === 'server_error') {
        errorMessage = 'El servicio de autenticación no está disponible temporalmente. Por favor, inténtalo más tarde.';
      } else if (errorParam === 'invalid_request') {
        errorMessage = 'La solicitud de autenticación no es válida. Por favor, inténtalo de nuevo.';
      } else if (errorDescription) {
        errorMessage = decodeURIComponent(errorDescription);
      }
      
      Toast.error(errorMessage);
      
      // Clean up URL parameters after showing error
      const cleanUrl = window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
    }
  });
</script>

<style>
  /* Cosmic Login Background */
  .cosmic-login-bg {
    background: linear-gradient(135deg, #1e40af 0%, #3730a3 50%, #1e1b4b 100%);
    position: relative;
  }

  .cosmic-login-canvas {
    position: absolute;
    inset: 0;
    overflow: hidden;
  }

  .login-cosmic-bg {
    position: absolute;
    inset: 0;
    background: 
      radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
    animation: cosmic-shift 20s ease-in-out infinite;
  }

  /* Login Particles */
  .login-particles-container {
    position: absolute;
    inset: 0;
  }

  .login-particle {
    position: absolute;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.2) 100%);
    border-radius: 50%;
    animation: cosmic-drift 12s linear infinite;
  }

  .login-particle-1 { width: 3px; height: 3px; top: 10%; left: 15%; animation-delay: 0s; }
  .login-particle-2 { width: 2px; height: 2px; top: 20%; left: 85%; animation-delay: -2s; }
  .login-particle-3 { width: 4px; height: 4px; top: 40%; left: 10%; animation-delay: -4s; }
  .login-particle-4 { width: 3px; height: 3px; top: 60%; left: 90%; animation-delay: -6s; }
  .login-particle-5 { width: 2px; height: 2px; top: 80%; left: 20%; animation-delay: -8s; }
  .login-particle-6 { width: 3px; height: 3px; top: 30%; left: 70%; animation-delay: -10s; }
  .login-particle-7 { width: 4px; height: 4px; top: 70%; left: 30%; animation-delay: -12s; }
  .login-particle-8 { width: 2px; height: 2px; top: 90%; left: 80%; animation-delay: -14s; }

  /* Login Energy Rings */
  .login-energy-ring {
    position: absolute;
    border: 2px solid;
    border-image: linear-gradient(45deg, rgba(79, 172, 254, 0.4), rgba(139, 92, 246, 0.4)) 1;
    border-radius: 50%;
    animation: pulse-glow 8s ease-in-out infinite;
  }

  .login-ring-1 {
    width: 200px;
    height: 200px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .login-ring-2 {
    width: 150px;
    height: 150px;
    bottom: 20%;
    right: 15%;
    animation-delay: -4s;
  }

  /* Login Floating Shapes */
  .login-cosmic-shapes {
    position: absolute;
    inset: 0;
  }

  .login-shape {
    position: absolute;
    background: linear-gradient(135deg, rgba(79, 172, 254, 0.2), rgba(139, 92, 246, 0.2));
    animation: gentle-float 8s ease-in-out infinite;
  }

  .login-shape-hexagon {
    width: 25px;
    height: 25px;
    top: 15%;
    right: 20%;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    animation-delay: 0s;
  }

  .login-shape-triangle {
    width: 20px;
    height: 20px;
    bottom: 25%;
    left: 15%;
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    animation-delay: -2s;
  }

  .login-shape-diamond {
    width: 22px;
    height: 22px;
    top: 60%;
    right: 10%;
    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
    animation-delay: -4s;
  }

  /* Login Card */
  .login-card {
    position: relative;
    overflow: hidden;
  }

  .login-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: inherit;
    pointer-events: none;
  }

  .login-title {
    background: linear-gradient(135deg, #ffffff 0%, #e0e7ff 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
  }

  /* Cosmic Input */
  .cosmic-input {
    position: relative;
  }

  .cosmic-input:focus {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }

  .cosmic-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  /* Cosmic Login Button */
  .cosmic-login-button {
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #06b6d4 100%);
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
    position: relative;
    overflow: hidden;
  }

  .cosmic-login-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .cosmic-login-button:hover::before {
    left: 100%;
  }

  .cosmic-login-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
  }

  /* Animations */
  @keyframes cosmic-shift {
    0%, 100% { transform: rotate(0deg) scale(1); }
    50% { transform: rotate(180deg) scale(1.1); }
  }

  @keyframes cosmic-drift {
    0% { transform: translateY(0px) translateX(0px); opacity: 0; }
    10% { opacity: 1; }
    90% { opacity: 1; }
    100% { transform: translateY(-100vh) translateX(50px); opacity: 0; }
  }

  @keyframes pulse-glow {
    0%, 100% { transform: scale(1); opacity: 0.3; }
    50% { transform: scale(1.1); opacity: 0.6; }
  }

  @keyframes gentle-float {
    0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.4; }
    50% { transform: translateY(-15px) rotate(180deg); opacity: 0.7; }
  }

  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
</style>