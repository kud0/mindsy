---
import Layout from "../../layouts/ModernDashboardLayout.astro";
import { ExamContent } from "../../components/dashboard/ExamContent";
import { requireAuth, createClient } from "../../lib/supabase-server";

// Get user and check auth
const { user, response } = await requireAuth(Astro.cookies);
if (response) return response;

const supabase = createClient(Astro.cookies);

// Fetch user profile
const { data: profile } = await supabase
  .from('profiles')
  .select('*')
  .eq('id', user.id)
  .single();

// Fetch user's folders with note counts
const { data: folders } = await supabase
  .from('folders')
  .select('id, name, parent_id')
  .eq('user_id', user.id)
  .order('name');

// Count notes in each folder
const foldersWithCount = await Promise.all((folders || []).map(async (folder) => {
  const { count } = await supabase
    .from('notes')
    .select('id', { count: 'exact', head: true })
    .eq('user_id', user.id)
    .eq('folder_id', folder.id);
  
  return {
    id: folder.id,
    name: folder.name,
    parentId: folder.parent_id,
    count: count || 0  // Changed from noteCount to count to match Folder interface
  };
}));

// Also get unfiled notes count
const { count: unfiledCount } = await supabase
  .from('notes')
  .select('id', { count: 'exact', head: true })
  .eq('user_id', user.id)
  .is('folder_id', null);

const allFolders = [
  {
    id: 'unfiled',
    name: 'Unfiled',
    parentId: null,
    count: unfiledCount || 0  // Changed from noteCount to count
  },
  ...foldersWithCount
];

console.log('Exam page - Folders found:', allFolders.length);
console.log('Exam page - Folders:', allFolders);

const userData = {
  id: user.id,
  name: profile?.full_name || profile?.name || user.email?.split('@')[0] || 'User',
  email: user.email || '',
  avatar: profile?.avatar_url || user.user_metadata?.avatar_url || '',
  plan: profile?.subscription_tier || 'free',
  minutesUsed: profile?.minutes_used || 0,
  minutesLimit: profile?.subscription_tier === 'student' ? 1500 : 15
};
---

<Layout title="Exam Center" description="Create and manage your exams">
  <ExamContent 
    client:only="react"
    user={userData} 
    initialFolders={allFolders}
  />
</Layout>