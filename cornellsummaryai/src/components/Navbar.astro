---
import Logo from "./Logo.astro";

export interface Props {
  lang?: "en" | "es";
  currentPage?:
    | "home"
    | "pricing"
    | "blog"
    | "dashboard"
    | "account"
    | "login"
    | "signup";
  isAuthenticated?: boolean;
}

// Get props with defaults
const { lang = "en", currentPage, isAuthenticated = false } = Astro.props;

// Get user from locals if not explicitly passed (for server-side auth detection)
const user = Astro.locals.user;
const authState = isAuthenticated || !!user;

// Define routes based on language
const homeUrl = lang === "es" ? "/es" : "/";
const pricingUrl = lang === "es" ? "/es/pricing" : "/pricing";
const dashboardUrl = lang === "es" ? "/es/dashboard" : "/dashboard";
const accountUrl =
  lang === "es" ? "/es/dashboard/account" : "/dashboard/account";
const loginUrl = lang === "es" ? "/es/auth/login" : "/auth/login";
const signupUrl = lang === "es" ? "/es/auth/signup" : "/auth/signup";
const blogUrl = lang === "es" ? "/es/blog" : "/blog";
// Smart language switching based on current page
function getLangSwitchUrl(targetLang: string) {
  if (currentPage === "dashboard") {
    return targetLang === "es" ? "/es/dashboard" : "/dashboard";
  } else if (currentPage === "account") {
    return targetLang === "es" ? "/es/dashboard/account" : "/dashboard/account";
  } else if (currentPage === "pricing") {
    return targetLang === "es" ? "/es/pricing" : "/pricing";
  } else if (currentPage === "login") {
    return targetLang === "es" ? "/es/auth/login" : "/auth/login";
  } else if (currentPage === "signup") {
    return targetLang === "es" ? "/es/auth/signup" : "/auth/signup";
  } else if (currentPage === "blog") {
    return targetLang === "es" ? "/es/blog" : "/blog";
  } else {
    // Default to homepage
    return targetLang === "es" ? "/es" : "/";
  }
}

// Import translations
import { useTranslations } from "../lib/i18n";
const t = useTranslations(lang);

// Helper function to get active page class - cleaner design
function getPageClass(page: string): string {
  return currentPage === page
    ? "text-blue-600 hover:text-blue-700 text-sm font-normal transition-colors"
    : "text-gray-600 hover:text-gray-800 text-sm font-normal transition-colors";
}
---

<nav class="bg-white border-b border-gray-100">
  <div class="container mx-auto px-4">
    <div class="flex items-center h-16">
      <!-- Left: Logo + Title -->
      <div class="flex-shrink-0">
        <a
          href={homeUrl}
          class="flex items-center text-xl font-bold text-gray-900"
        >
          <Logo class="text-blue-600" width="44" height="32" /><span class="ml-2">MySummary</span>
        </a>
      </div>

      <!-- Center: Navigation Menu -->
      <div class="flex-1 flex justify-center">
        <div class="hidden md:flex items-center space-x-8">
          <a href={blogUrl} class={getPageClass("blog")}>{t("nav.blog")}</a>
          <a href={pricingUrl} class={getPageClass("pricing")}>{t("nav.pricing")}</a>
          <a 
            href={accountUrl} 
            class={getPageClass("account") + (authState ? '' : ' hidden')}
            data-auth="true"
            class={getPageClass("account") + (!authState ? ' hidden' : '')}
          >
            {t("nav.account")}
          </a>
        </div>
      </div>

      <!-- Right: Actions + Language -->
      <div class="flex-shrink-0">
        <div class="hidden md:flex items-center space-x-4">
        <div data-auth="true" class={"flex items-center space-x-4" + (!authState ? ' hidden' : '')}>
              <a
                href={dashboardUrl}
                class="cosmic-convert-btn text-white px-4 py-2 rounded-md text-sm font-normal transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                {t("nav.convert")}
              </a>
              <button
                id="logout-btn-landing"
                class="text-gray-600 hover:text-gray-800 py-2 rounded-md text-sm font-normal transition-colors"
                title={t("nav.logout")}
                aria-label={t("nav.logout")}
              >
                <svg
                  class="w-5 h-5"
                  fill="currentColor"
                  viewBox="0 0 640 640"
                >
                  <path d="M569 337C578.4 327.6 578.4 312.4 569 303.1L425 159C418.1 152.1 407.8 150.1 398.8 153.8C389.8 157.5 384 166.3 384 176L384 256L272 256C245.5 256 224 277.5 224 304L224 336C224 362.5 245.5 384 272 384L384 384L384 464C384 473.7 389.8 482.5 398.8 486.2C407.8 489.9 418.1 487.9 425 481L569 337zM224 160C241.7 160 256 145.7 256 128C256 110.3 241.7 96 224 96L160 96C107 96 64 139 64 192L64 448C64 501 107 544 160 544L224 544C241.7 544 256 529.7 256 512C256 494.3 241.7 480 224 480L160 480C142.3 480 128 465.7 128 448L128 192C128 174.3 142.3 160 160 160L224 160z" />
                </svg>
              </button>
              <!-- Language Switcher -->
              <div class="relative ml-2 border-l border-gray-200 pl-4">
                <button
                  id="language-dropdown-btn"
                  class="flex items-center text-gray-600 hover:text-gray-800 px-2 py-2 rounded-md text-sm font-normal transition-colors"
                  title="Select Language"
                  aria-label="Select Language"
                  aria-expanded="false"
                  aria-haspopup="true"
                >
                  <svg
                    class="w-5 h-5"
                    fill="currentColor"
                    viewBox="0 0 640 640"
                  >
                    <path d="M415.9 344L225 344C227.9 408.5 242.2 467.9 262.5 511.4C273.9 535.9 286.2 553.2 297.6 563.8C308.8 574.3 316.5 576 320.5 576C324.5 576 332.2 574.3 343.4 563.8C354.8 553.2 367.1 535.8 378.5 511.4C398.8 467.9 413.1 408.5 416 344zM224.9 296L415.8 296C413 231.5 398.7 172.1 378.4 128.6C367 104.2 354.7 86.8 343.3 76.2C332.1 65.7 324.4 64 320.4 64C316.4 64 308.7 65.7 297.5 76.2C286.1 86.8 273.8 104.2 262.4 128.6C242.1 172.1 227.8 231.5 224.9 296zM176.9 296C180.4 210.4 202.5 130.9 234.8 78.7C142.7 111.3 74.9 195.2 65.5 296L176.9 296zM65.5 344C74.9 444.8 142.7 528.7 234.8 561.3C202.5 509.1 180.4 429.6 176.9 344L65.5 344zM463.9 344C460.4 429.6 438.3 509.1 406 561.3C498.1 528.6 565.9 444.8 575.3 344L463.9 344zM575.3 296C565.9 195.2 498.1 111.3 406 78.7C438.3 130.9 460.4 210.4 463.9 296L575.3 296z" />
                  </svg>
                  <svg class="w-3 h-3 ml-1 transition-transform duration-200" fill="currentColor" viewBox="0 0 12 12">
                    <path d="M6 8L2 4h8l-4 4z"/>
                  </svg>
                </button>
                <!-- Dropdown Menu -->
                <div
                  id="language-dropdown-menu"
                  class="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50 hidden"
                >
                  <a
                    href={getLangSwitchUrl("en")}
                    class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "en" ? "text-blue-600 font-medium" : "text-gray-700"}`}
                  >
                    ðŸ‡ºðŸ‡¸ English
                  </a>
                  <a
                    href={getLangSwitchUrl("es")}
                    class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "es" ? "text-blue-600 font-medium" : "text-gray-700"}`}
                  >
                    ðŸ‡ªðŸ‡¸ EspaÃ±ol
                  </a>
                </div>
              </div>
            </div>
        <div data-auth="false" class={"flex items-center space-x-4" + (authState ? ' hidden' : '')}>
              <a href={loginUrl} class={getPageClass("login")}>
                {t("nav.login")}
              </a>
              <a
                href={signupUrl}
                class="bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded-md text-sm font-normal transition-colors"
              >
                {t("nav.getStarted")}
              </a>
              <!-- Language Switcher -->
              <div class="relative ml-4 border-l border-gray-200 pl-4">
                <button
                  id="language-dropdown-btn-unauthenticated"
                  class="flex items-center text-gray-600 hover:text-gray-800 px-2 py-2 rounded-md text-sm font-normal transition-colors"
                  title="Select Language"
                  aria-label="Select Language"
                  aria-expanded="false"
                  aria-haspopup="true"
                >
                  <svg
                    class="w-5 h-5"
                    fill="currentColor"
                    viewBox="0 0 640 640"
                  >
                    <path d="M415.9 344L225 344C227.9 408.5 242.2 467.9 262.5 511.4C273.9 535.9 286.2 553.2 297.6 563.8C308.8 574.3 316.5 576 320.5 576C324.5 576 332.2 574.3 343.4 563.8C354.8 553.2 367.1 535.8 378.5 511.4C398.8 467.9 413.1 408.5 416 344zM224.9 296L415.8 296C413 231.5 398.7 172.1 378.4 128.6C367 104.2 354.7 86.8 343.3 76.2C332.1 65.7 324.4 64 320.4 64C316.4 64 308.7 65.7 297.5 76.2C286.1 86.8 273.8 104.2 262.4 128.6C242.1 172.1 227.8 231.5 224.9 296zM176.9 296C180.4 210.4 202.5 130.9 234.8 78.7C142.7 111.3 74.9 195.2 65.5 296L176.9 296zM65.5 344C74.9 444.8 142.7 528.7 234.8 561.3C202.5 509.1 180.4 429.6 176.9 344L65.5 344zM463.9 344C460.4 429.6 438.3 509.1 406 561.3C498.1 528.6 565.9 444.8 575.3 344L463.9 344zM575.3 296C565.9 195.2 498.1 111.3 406 78.7C438.3 130.9 460.4 210.4 463.9 296L575.3 296z" />
                  </svg>
                  <svg class="w-3 h-3 ml-1 transition-transform duration-200" fill="currentColor" viewBox="0 0 12 12">
                    <path d="M6 8L2 4h8l-4 4z"/>
                  </svg>
                </button>
                <!-- Dropdown Menu -->
                <div
                  id="language-dropdown-menu-unauthenticated"
                  class="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50 hidden"
                >
                  <a
                    href={getLangSwitchUrl("en")}
                    class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "en" ? "text-blue-600 font-medium" : "text-gray-700"}`}
                  >
                    ðŸ‡ºðŸ‡¸ English
                  </a>
                  <a
                    href={getLangSwitchUrl("es")}
                    class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "es" ? "text-blue-600 font-medium" : "text-gray-700"}`}
                  >
                    ðŸ‡ªðŸ‡¸ EspaÃ±ol
                  </a>
                </div>
              </div>
            </div>
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center space-x-3">
        <!-- Language Switcher Mobile - Hidden since language selection is in mobile menu -->
        <div class="relative hidden">
          <button
            id="language-dropdown-btn-mobile"
            class="flex items-center text-gray-600 hover:text-gray-800 px-2 py-2 rounded-md text-sm font-normal transition-colors"
            title="Select Language"
            aria-label="Select Language"
            aria-expanded="false"
            aria-haspopup="true"
          >
            <svg
              class="w-4 h-4"
              fill="currentColor"
              viewBox="0 0 640 640"
            >
              <path d="M415.9 344L225 344C227.9 408.5 242.2 467.9 262.5 511.4C273.9 535.9 286.2 553.2 297.6 563.8C308.8 574.3 316.5 576 320.5 576C324.5 576 332.2 574.3 343.4 563.8C354.8 553.2 367.1 535.8 378.5 511.4C398.8 467.9 413.1 408.5 416 344zM224.9 296L415.8 296C413 231.5 398.7 172.1 378.4 128.6C367 104.2 354.7 86.8 343.3 76.2C332.1 65.7 324.4 64 320.4 64C316.4 64 308.7 65.7 297.5 76.2C286.1 86.8 273.8 104.2 262.4 128.6C242.1 172.1 227.8 231.5 224.9 296zM176.9 296C180.4 210.4 202.5 130.9 234.8 78.7C142.7 111.3 74.9 195.2 65.5 296L176.9 296zM65.5 344C74.9 444.8 142.7 528.7 234.8 561.3C202.5 509.1 180.4 429.6 176.9 344L65.5 344zM463.9 344C460.4 429.6 438.3 509.1 406 561.3C498.1 528.6 565.9 444.8 575.3 344L463.9 344zM575.3 296C565.9 195.2 498.1 111.3 406 78.7C438.3 130.9 460.4 210.4 463.9 296L575.3 296z" />
            </svg>
            <svg class="w-3 h-3 ml-1 transition-transform duration-200" fill="currentColor" viewBox="0 0 12 12">
              <path d="M6 8L2 4h8l-4 4z"/>
            </svg>
          </button>
          <!-- Dropdown Menu -->
          <div
            id="language-dropdown-menu-mobile"
            class="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50 hidden"
          >
            <a
              href={getLangSwitchUrl("en")}
              class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "en" ? "text-blue-600 font-medium" : "text-gray-700"}`}
            >
              ðŸ‡ºðŸ‡¸ English
            </a>
            <a
              href={getLangSwitchUrl("es")}
              class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 ${lang === "es" ? "text-blue-600 font-medium" : "text-gray-700"}`}
            >
              ðŸ‡ªðŸ‡¸ EspaÃ±ol
            </a>
          </div>
        </div>
        <button
          type="button"
          class="mobile-menu-button text-gray-600 hover:text-gray-800 focus:outline-none z-50 relative p-2"
          aria-label="toggle menu"
        >
          <svg
            class="h-5 w-5 hamburger-icon transition-transform duration-300"
            viewBox="0 0 24 24"
          >
            <path
              class="hamburger-line-1"
              d="M4 6h16"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"></path>
            <path
              class="hamburger-line-2"
              d="M4 12h16"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"></path>
            <path
              class="hamburger-line-3"
              d="M4 18h16"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Full-Screen Mobile Overlay Menu -->
  <div class="mobile-menu fixed inset-0 z-50 hidden md:hidden">
    <!-- Backdrop -->
    <div
      class="mobile-menu-backdrop fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 z-10"
    >
    </div>

    <!-- Menu Panel -->
    <div
      class="mobile-menu-panel fixed inset-0 bg-white flex flex-col transform transition-transform duration-300 ease-in-out z-20"
    >
      <!-- Header with close button -->
      <div class="flex items-center justify-between p-4 border-b">
        <a
          href={homeUrl}
          class="flex items-center text-xl font-bold text-gray-900"
        >
          <Logo class="text-blue-600" width="44" height="32" /><span class="ml-2">MySummary</span>
        </a>
        <button
          type="button"
          class="mobile-menu-close text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600"
        >
          <svg
            class="h-6 w-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Menu Content -->
      <div class="flex-1 overflow-y-auto">
        <div class="px-6 py-8 space-y-6">
          <!-- Navigation Links -->
          <div class="space-y-4">
            <a
              href={blogUrl}
              class="flex items-center py-3 text-lg font-medium text-gray-700 hover:text-blue-600 transition-colors duration-200"
            >
              <svg
                class="w-6 h-6 mr-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                ></path>
              </svg>
              {t("nav.blog")}
            </a>

            <a
              href={pricingUrl}
              class={`flex items-center py-3 text-lg font-medium transition-colors duration-200 ${currentPage === "pricing" ? "text-blue-600" : "text-gray-700 hover:text-blue-600"}`}
            >
              <svg
                class="w-6 h-6 mr-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {t("nav.pricing")}
            </a>


            <div data-auth="true" class={!authState ? 'hidden' : ''}>
                  <a
                    href={dashboardUrl}
                    class="flex items-center py-3 text-lg font-medium text-gray-700 hover:text-blue-600 transition-colors duration-200"
                  >
                    <svg
                      class="w-6 h-6 mr-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      />
                    </svg>
                    {t("nav.convert")}
                  </a>

                  <a
                    href={accountUrl}
                    class="flex items-center py-3 text-lg font-medium text-gray-700 hover:text-blue-600 transition-colors duration-200"
                  >
                    <svg
                      class="w-6 h-6 mr-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                      />
                    </svg>
                    {t("nav.account")}
                  </a>

                  <button
                    id="logout-btn-mobile"
                    class="flex items-center w-full py-3 text-lg font-medium text-gray-700 hover:text-red-600 transition-colors duration-200"
                  >
                    <svg
                      class="w-6 h-6 mr-4"
                      fill="currentColor"
                      viewBox="0 0 640 640"
                    >
                      <path d="M569 337C578.4 327.6 578.4 312.4 569 303.1L425 159C418.1 152.1 407.8 150.1 398.8 153.8C389.8 157.5 384 166.3 384 176L384 256L272 256C245.5 256 224 277.5 224 304L224 336C224 362.5 245.5 384 272 384L384 384L384 464C384 473.7 389.8 482.5 398.8 486.2C407.8 489.9 418.1 487.9 425 481L569 337zM224 160C241.7 160 256 145.7 256 128C256 110.3 241.7 96 224 96L160 96C107 96 64 139 64 192L64 448C64 501 107 544 160 544L224 544C241.7 544 256 529.7 256 512C256 494.3 241.7 480 224 480L160 480C142.3 480 128 465.7 128 448L128 192C128 174.3 142.3 160 160 160L224 160z" />
                    </svg>
                    {t("nav.logout")}
                  </button>
            </div>
            <div data-auth="false" class={authState ? 'hidden' : ''}>
                  <a
                    href={loginUrl}
                    class="flex items-center py-3 text-lg font-medium text-gray-700 hover:text-blue-600 transition-colors duration-200"
                  >
                    <svg
                      class="w-6 h-6 mr-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"
                      />
                    </svg>
                    {t("nav.login")}
                  </a>

                  <a
                    href={signupUrl}
                    class="flex items-center py-3 text-lg font-medium text-blue-600 hover:text-blue-700 transition-colors duration-200"
                  >
                    <svg
                      class="w-6 h-6 mr-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"
                      />
                    </svg>
                    {t("nav.getStarted")}
                  </a>
            </div>
          </div>

          <!-- Language Switcher -->
          <div class="pt-6 border-t">
            <h3
              class="text-sm font-medium text-gray-500 uppercase tracking-wider mb-3"
            >
              Language
            </h3>
            <div class="flex space-x-4">
              <a
                href={getLangSwitchUrl("en")}
                class={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${lang === "en" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-700 hover:bg-gray-200"}`}
              >
                English
              </a>
              <a
                href={getLangSwitchUrl("es")}
                class={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${lang === "es" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-700 hover:bg-gray-200"}`}
              >
                EspaÃ±ol
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="p-6 border-t bg-gray-50">
        <p class="text-sm text-gray-500 text-center">Â© 2024 MySummary APP</p>
      </div>
    </div>
  </div>
</nav>

<style>
  /* === COSMIC CONVERT BUTTON === */
  .cosmic-convert-btn {
    background: 
      linear-gradient(135deg, 
        rgba(79, 172, 254, 0.9) 0%,
        rgba(139, 92, 246, 0.9) 25%,
        rgba(236, 72, 153, 0.9) 50%,
        rgba(139, 92, 246, 0.9) 75%,
        rgba(79, 172, 254, 0.9) 100%
      ),
      radial-gradient(circle at 50% 0%, rgba(79, 172, 254, 0.3) 0%, transparent 50%),
      radial-gradient(circle at 100% 100%, rgba(236, 72, 153, 0.3) 0%, transparent 50%);
    background-size: 200% 200%, 100% 100%, 100% 100%;
    border: 1px solid rgba(79, 172, 254, 0.4);
    box-shadow: 
      0 0 20px rgba(79, 172, 254, 0.3),
      0 4px 15px rgba(139, 92, 246, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    position: relative;
    overflow: hidden;
    animation: cosmic-pulse 4s ease-in-out infinite;
  }

  .cosmic-convert-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent 0%, 
      rgba(255, 255, 255, 0.4) 50%, 
      transparent 100%
    );
    animation: cosmic-scan 3s ease-in-out infinite;
    pointer-events: none;
  }

  .cosmic-convert-btn::after {
    content: '';
    position: absolute;
    inset: 0;
    background: 
      radial-gradient(circle at var(--x, 50%) var(--y, 50%), 
        rgba(255, 255, 255, 0.1) 0%, 
        transparent 50%
      );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .cosmic-convert-btn:hover {
    background-position: 100% 100%, 50% 50%, 50% 50%;
    box-shadow: 
      0 0 30px rgba(79, 172, 254, 0.5),
      0 4px 20px rgba(139, 92, 246, 0.3),
      0 0 40px rgba(236, 72, 153, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    animation: cosmic-pulse-fast 2s ease-in-out infinite;
  }

  .cosmic-convert-btn:hover::after {
    opacity: 1;
  }

  .cosmic-convert-btn:active {
    transform: translateY(1px) scale(0.98);
    box-shadow: 
      0 0 15px rgba(79, 172, 254, 0.4),
      inset 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  @keyframes cosmic-pulse {
    0%, 100% { 
      background-position: 0% 50%, 50% 50%, 50% 50%;
      transform: scale(1);
    }
    50% { 
      background-position: 100% 50%, 50% 50%, 50% 50%;
      transform: scale(1.02);
    }
  }

  @keyframes cosmic-pulse-fast {
    0%, 100% { 
      background-position: 0% 50%, 50% 50%, 50% 50%;
      transform: scale(1.05);
      filter: brightness(1.1);
    }
    50% { 
      background-position: 100% 50%, 50% 50%, 50% 50%;
      transform: scale(1.08);
      filter: brightness(1.2) saturate(1.2);
    }
  }

  @keyframes cosmic-scan {
    0% { left: -100%; }
    50% { left: 100%; }
    100% { left: -100%; }
  }

  /* Interactive cursor effect */
  .cosmic-convert-btn:hover {
    --x: 50%;
    --y: 50%;
  }

  /* Hamburger animation - perfectly centered X */
  .hamburger-icon.open .hamburger-line-1 {
    transform: rotate(45deg) translate(5px, 5px) !important;
    transform-origin: center center !important;
  }

  .hamburger-icon.open .hamburger-line-2 {
    opacity: 0 !important;
    transform: scale(0) !important;
  }

  .hamburger-icon.open .hamburger-line-3 {
    transform: rotate(-45deg) translate(5px, -5px) !important;
    transform-origin: center center !important;
  }

  /* Ensure smooth transitions */
  .hamburger-line-1,
  .hamburger-line-2,
  .hamburger-line-3 {
    transition: all 0.3s ease-in-out;
    transform-origin: center;
  }

  /* Mobile menu animations - simplified and fixed */
  .mobile-menu {
    transition: opacity 300ms ease-in-out, visibility 300ms ease-in-out;
  }

  .mobile-menu.hidden {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
  }

  .mobile-menu:not(.hidden) {
    opacity: 1 !important;
    visibility: visible !important;
    pointer-events: auto !important;
    display: block !important;
  }

  /* Ensure menu panel is always visible when menu is shown */
  .mobile-menu-panel {
    transition: transform 300ms ease-in-out;
  }

  .mobile-menu.hidden .mobile-menu-panel {
    transform: translateX(100%);
  }

  .mobile-menu:not(.hidden) .mobile-menu-panel {
    transform: translateX(0) !important;
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
    z-index: 20 !important;
    pointer-events: auto !important;
  }

  /* Ensure backdrop doesn't block menu content */
  .mobile-menu-backdrop {
    z-index: 10 !important;
    pointer-events: auto !important;
  }

  /* Ensure menu content is clickable */
  .mobile-menu-panel * {
    pointer-events: auto !important;
    z-index: inherit !important;
  }

  /* Prevent body scroll when menu is open */
  body.menu-open {
    overflow: hidden;
  }
</style>

<script is:inline define:vars={{ loginUrl, authState }}>
  document.addEventListener("DOMContentLoaded", async () => {
    // Client-side auth detection for blog pages (where server-side auth is bypassed)
    const isBlogPage = window.location.pathname.startsWith('/blog');
    let currentAuthState = authState;
    
    
    if (isBlogPage && !authState) {
      // Wait for Supabase to be available or use alternative detection
      const checkAuth = async () => {
        try {
          // Try multiple methods to detect authentication
          if (window.supabase) {
            const { data: { user } } = await window.supabase.auth.getUser();
            if (user) {
              currentAuthState = true;
              updateNavbarForAuth(true);
              return;
            }
          }
          
          // Alternative: Check for auth-related cookies more comprehensively
          const cookies = document.cookie.split(';').map(c => c.trim());
          const authCookies = cookies.filter(cookie => 
            cookie.startsWith('sb-') && (
              cookie.includes('access_token') ||
              cookie.includes('refresh_token') ||
              cookie.includes('auth-token')
            )
          );
          
          
          if (authCookies.length > 0) {
            currentAuthState = true;
            updateNavbarForAuth(true);
          }
        } catch (error) {
        }
      };
      
      // Try immediately
      await checkAuth();
      
      // If still not authenticated, wait for Supabase to fully initialize
      if (!currentAuthState) {
        
        // Listen for the BaseLayout initialization event
        const retryAuth = () => {
          setTimeout(async () => {
            await checkAuth();
            
            // Final retry if still not working
            if (!currentAuthState) {
              setTimeout(checkAuth, 2000);
            }
          }, 500);
        };
        
        // Retry after BaseLayout script runs
        retryAuth();
      }
    }
    
    function updateNavbarForAuth(isAuth) {
      
      // Show/hide authenticated vs non-authenticated elements
      const authElements = document.querySelectorAll('[data-auth="true"]');
      const nonAuthElements = document.querySelectorAll('[data-auth="false"]');
      
      
      authElements.forEach(el => {
        // For navigation links, use 'block' or 'inline' instead of 'flex'
        const isNavLink = el.tagName === 'A' && el.parentElement?.classList.contains('space-x-8');
        const newDisplay = isAuth ? (isNavLink ? 'block' : 'flex') : 'none';
        el.style.display = newDisplay;
      });
      
      nonAuthElements.forEach(el => {
        // For navigation links, use 'block' or 'inline' instead of 'flex'
        const isNavLink = el.tagName === 'A' && el.parentElement?.classList.contains('space-x-8');
        const newDisplay = isAuth ? 'none' : (isNavLink ? 'block' : 'flex');
        el.style.display = newDisplay;
      });
    }
    const mobileMenuButton = document.querySelector(".mobile-menu-button");
    const mobileMenu = document.querySelector(".mobile-menu");
    const mobileMenuClose = document.querySelector(".mobile-menu-close");
    const hamburgerIcon = document.querySelector(".hamburger-icon");

    function openMobileMenu() {
      mobileMenu.classList.remove("hidden");
      hamburgerIcon?.classList.add("open");
      document.body.classList.add("menu-open");
      
      // Force visibility for debugging
      mobileMenu.style.display = 'block';
      mobileMenu.style.opacity = '1';
      mobileMenu.style.visibility = 'visible';
      
      // Also force the panel to be visible
      const panel = mobileMenu.querySelector('.mobile-menu-panel');
      if (panel) {
        panel.style.transform = 'translateX(0)';
        panel.style.display = 'flex';
        panel.style.visibility = 'visible';
        panel.style.opacity = '1';
      }
      
    }

    function closeMobileMenu() {
      mobileMenu.classList.add("hidden");
      hamburgerIcon?.classList.remove("open");
      document.body.classList.remove("menu-open");
      
      // Also force hide styles
      mobileMenu.style.display = 'none';
      mobileMenu.style.opacity = '0';
      mobileMenu.style.visibility = 'hidden';
    }

    // Enhanced mobile menu initialization

    if (mobileMenuButton && mobileMenu && !mobileMenuButton.dataset.listenerAdded) {
      mobileMenuButton.dataset.listenerAdded = 'true';
      mobileMenuButton.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();

        if (mobileMenu.classList.contains("hidden")) {
          openMobileMenu();
        } else {
          closeMobileMenu();
        }
      });

      // Close button functionality - simplified and direct
      if (mobileMenuClose) {
        // Remove any existing listeners
        mobileMenuClose.replaceWith(mobileMenuClose.cloneNode(true));
        const newCloseButton = document.querySelector(".mobile-menu-close");
        
        newCloseButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          closeMobileMenu();
        });
      }

      // Close mobile menu when clicking backdrop - simplified
      const backdrop = document.querySelector(".mobile-menu-backdrop");
      if (backdrop) {
        backdrop.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          closeMobileMenu();
        });
      }
      
      // Close when clicking outside the panel
      mobileMenu.addEventListener("click", (e) => {
        const panel = mobileMenu.querySelector('.mobile-menu-panel');
        // Only close if clicking outside the panel content
        if (!panel.contains(e.target)) {
          closeMobileMenu();
        }
      });

      // Close menu when clicking on navigation links
      const menuLinks = mobileMenu.querySelectorAll("a:not(.mobile-menu-close)");
      menuLinks.forEach((link) => {
        // Ensure the link is clickable
        link.style.pointerEvents = 'auto';
        link.style.zIndex = '30';
        
        link.addEventListener("click", (e) => {
          // Let the navigation happen, then close the menu
          setTimeout(() => {
            closeMobileMenu();
          }, 150);
        });
      });

      // Close menu on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !mobileMenu.classList.contains("hidden")) {
          closeMobileMenu();
        }
      });
    }

    // Language dropdown functionality
    function initLanguageDropdowns() {
      const dropdowns = [
        {
          button: document.getElementById("language-dropdown-btn"),
          menu: document.getElementById("language-dropdown-menu")
        },
        {
          button: document.getElementById("language-dropdown-btn-unauthenticated"),
          menu: document.getElementById("language-dropdown-menu-unauthenticated")
        },
        {
          button: document.getElementById("language-dropdown-btn-mobile"),
          menu: document.getElementById("language-dropdown-menu-mobile")
        }
      ];

      dropdowns.forEach(({ button, menu }) => {
        if (button && menu) {
          button.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Close other dropdowns
            dropdowns.forEach(({ button: otherBtn, menu: otherMenu }) => {
              if (otherBtn !== button && otherMenu) {
                otherMenu.classList.add("hidden");
                otherBtn.setAttribute("aria-expanded", "false");
                const chevron = otherBtn.querySelector("svg:last-child");
                if (chevron) chevron.style.transform = "rotate(0deg)";
              }
            });
            
            // Toggle current dropdown
            const isOpen = !menu.classList.contains("hidden");
            menu.classList.toggle("hidden");
            button.setAttribute("aria-expanded", (!isOpen).toString());
            
            // Rotate chevron
            const chevron = button.querySelector("svg:last-child");
            if (chevron) {
              chevron.style.transform = isOpen ? "rotate(0deg)" : "rotate(180deg)";
            }
          });
        }
      });

      // Close dropdowns when clicking outside
      document.addEventListener("click", (e) => {
        dropdowns.forEach(({ button, menu }) => {
          if (button && menu && !button.contains(e.target) && !menu.contains(e.target)) {
            menu.classList.add("hidden");
            button.setAttribute("aria-expanded", "false");
            const chevron = button.querySelector("svg:last-child");
            if (chevron) chevron.style.transform = "rotate(0deg)";
          }
        });
      });

      // Close dropdowns on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          dropdowns.forEach(({ button, menu }) => {
            if (button && menu && !menu.classList.contains("hidden")) {
              menu.classList.add("hidden");
              button.setAttribute("aria-expanded", "false");
              const chevron = button.querySelector("svg:last-child");
              if (chevron) chevron.style.transform = "rotate(0deg)";
            }
          });
        }
      });
    }

    // Initialize language dropdowns
    initLanguageDropdowns();

    // Logout functionality for authenticated users
    if (authState) {
      const logoutBtns = [
        document.getElementById("logout-btn-landing"),
        document.getElementById("logout-btn-mobile"),
      ];

      logoutBtns.forEach((btn) => {
        if (btn) {
          btn.onclick = async (e) => {
            e.preventDefault();
            e.stopPropagation();

            try {
              // Use proper API endpoint for logout (Astro best practice)
              const form = document.createElement("form");
              form.method = "POST";
              form.action = "/api/auth/signout";
              document.body.appendChild(form);
              form.submit();
            } catch (error) {
              // Fallback: redirect to login
              window.location.href = loginUrl;
            }
          };
        }
      });
    }
  });
</script>
