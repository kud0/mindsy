---
export interface Props {
  lang?: 'en' | 'es';
}

const { lang = 'en' } = Astro.props;

// Import translations
import { useTranslations } from '../lib/i18n';
const t = useTranslations(lang);

// Tier configuration for scalability and future tiers
const tierConfig = {
  free: {
    name: t('dashboard.progress.free'),
    color: 'from-gray-50 to-gray-100',
    progressColor: 'bg-gray-400',
    textColor: 'text-gray-700',
    badgeColor: 'bg-gray-100 text-gray-800',
    limitMinutes: 180,  // 3 hours
    limitMB: 120        // Keep for transition
  },
  student: {
    name: t('dashboard.progress.student'),
    color: 'from-green-50 to-green-100',
    progressColor: 'bg-green-500',
    textColor: 'text-green-800',
    badgeColor: 'bg-green-100 text-green-800',
    limitMinutes: 1500, // 25 hours
    limitMB: 700        // Keep for transition
  },
  genius: {
    name: t('dashboard.progress.genius'),
    color: 'from-purple-50 to-purple-100',
    progressColor: 'bg-purple-500',
    textColor: 'text-purple-800',
    badgeColor: 'bg-purple-100 text-purple-800',
    limitMinutes: 6000, // 100 hours
    limitMB: 2000       // Keep for transition
  }
};
---

<!-- Progress Bar Component -->
<div 
  id="progress-bar-container" 
  class="w-full mb-3 lg:mb-6"
>
  <div 
    id="progress-bar-card"
    class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border p-4"
  >
    <!-- Progress Bar Header -->
    <div class="flex items-center justify-between mb-3">
      <div 
        id="tier-badge" 
        class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
      >
        Free
      </div>
      <div 
        id="usage-stats" 
        class="text-sm font-medium text-gray-800"
      >
        <span id="usage-text">0m / 3h</span>
      </div>
    </div>
    
    <!-- Progress Bar -->
    <div class="w-full bg-white bg-opacity-50 rounded-full h-2 overflow-hidden">
      <div 
        id="progress-fill"
        class="h-full rounded-full transition-all duration-500 ease-out bg-gray-400"
        data-width="0"
      ></div>
    </div>
  </div>
</div>

<style>
  /* Smooth progress animation */
  #progress-fill {
    transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Loading animation for the progress bar */
  .loading-shimmer {
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }
  
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }
</style>

<script define:vars={{ tierConfig, lang }}>
  // Utility function to format duration
  function formatDuration(minutes) {
    if (minutes < 60) {
      return `${minutes}m`;
    }
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (remainingMinutes === 0) {
      return `${hours}h`;
    }
    
    return `${hours}h ${remainingMinutes}m`;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const progressContainer = document.getElementById('progress-bar-container');
    const progressCard = document.getElementById('progress-bar-card');
    const tierBadge = document.getElementById('tier-badge');
    const usageStats = document.getElementById('usage-stats');
    const usageText = document.getElementById('usage-text');
    const progressFill = document.getElementById('progress-fill');
    
    // Function to update progress bar (supports both minutes and MB)
    window.updateProgressBar = (tierName, currentUsage, totalLimit, isLoading = false, usageType = 'minutes') => {
      if (!progressContainer || !progressCard || !tierBadge || !usageStats || !usageText || !progressFill) {
        return;
      }
      
      // Show the progress bar
      progressContainer.classList.remove('hidden');
      
      if (isLoading) {
        // Loading state
        progressCard.className = 'bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border border-gray-200 p-4';
        tierBadge.className = 'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-700';
        tierBadge.textContent = lang === 'es' ? 'Cargando...' : 'Loading...';
        usageText.textContent = lang === 'es' ? 'Cargando...' : 'Loading...';
        usageStats.className = 'text-sm font-medium text-gray-600';
        progressFill.className = 'h-full rounded-full bg-gray-300 loading-shimmer';
        if (progressFill) progressFill.style.width = '30%';
        return;
      }
      
      // Get tier configuration
      const config = tierConfig[tierName] || tierConfig.free;
      
      // Calculate progress percentage
      const percentage = Math.min((currentUsage / totalLimit) * 100, 100);
      
      // Update card styling based on tier
      progressCard.className = `bg-gradient-to-r ${config.color} rounded-lg border border-${tierName === 'student' ? 'green' : tierName === 'genius' ? 'purple' : 'gray'}-200 p-4`;
      
      // Update tier badge
      tierBadge.className = `inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${config.badgeColor}`;
      tierBadge.textContent = config.name;
      
      // Update usage stats based on type
      if (usageType === 'minutes') {
        usageText.textContent = `${formatDuration(currentUsage)} / ${formatDuration(totalLimit)}`;
      } else {
        usageText.textContent = `${currentUsage}MB / ${totalLimit}MB`;
      }
      usageStats.className = `text-sm font-medium ${config.textColor}`;
      
      // Update progress bar fill
      progressFill.className = `h-full rounded-full ${config.progressColor} transition-all duration-500 ease-out`;
      if (progressFill) progressFill.style.width = `${percentage}%`;
      
      // Add visual feedback for high usage
      if (percentage >= 90) {
        progressFill.classList.add('animate-pulse');
      } else {
        progressFill.classList.remove('animate-pulse');
      }
      
      const unit = usageType === 'minutes' ? 'minutes' : 'MB';
    };
    
    // Function to hide progress bar
    window.hideProgressBar = () => {
      if (progressContainer) {
        progressContainer.classList.add('hidden');
      }
    };
    
    // Don't initialize here, let dashboard control it
    // Component is ready, dashboard will set the values
    
  });
</script>